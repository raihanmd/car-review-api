definitions:
  request.CarCreateRequest:
    properties:
      brand:
        type: string
      image:
        type: string
      model:
        type: string
      year:
        minimum: 1878
        type: integer
    required:
    - brand
    - image
    - model
    - year
    type: object
  request.CarUpdateRequest:
    properties:
      brand:
        type: string
      image:
        type: string
      model:
        type: string
      year:
        minimum: 1878
        type: integer
    type: object
  request.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  request.RegisterRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  request.UpdatePasswordRequest:
    properties:
      password:
        minLength: 3
        type: string
    required:
    - password
    type: object
  request.UpdateUserProfileRequest:
    properties:
      age:
        minimum: 0
        type: integer
      bio:
        maxLength: 500
        type: string
      email:
        type: string
      full_name:
        maxLength: 100
        minLength: 3
        type: string
      gender:
        enum:
        - MALE
        - FEMALE
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
    type: object
  response.CarResponse:
    properties:
      brand:
        example: Toyota
        type: string
      id:
        example: 1
        type: integer
      image:
        example: url
        type: string
      model:
        example: Yaris
        type: string
      year:
        example: 2020
        type: integer
    type: object
  response.LoginResponse:
    properties:
      role:
        example: USER
        type: string
      token:
        type: string
      username:
        example: luigi
        type: string
    type: object
  response.RegisterResponse:
    properties:
      role:
        example: USER
        type: string
      username:
        example: luigi
        type: string
    type: object
  response.UpdateUserProfileResponse:
    properties:
      age:
        example: 18
        type: integer
      bio:
        example: I am Luigi
        type: string
      email:
        example: luigi@sam.com
        type: string
      full_name:
        example: Luigi Di Caprio
        type: string
      gender:
        example: MALE
        type: string
      id:
        example: 1
        type: integer
      role:
        example: USER
        type: string
      username:
        example: luigi
        type: string
    type: object
  response.UserProfileResponse:
    properties:
      age:
        example: 18
        type: integer
      bio:
        example: I am Luigi
        type: string
      email:
        example: luigi@sam.com
        type: string
      full_name:
        example: Luigi Di Caprio
        type: string
      gender:
        example: MALE
        type: string
      id:
        example: 1
        type: integer
      role:
        example: USER
        type: string
      username:
        example: luigi
        type: string
    type: object
  web.WebBadRequestError:
    properties:
      code:
        example: 400
        type: integer
      errors:
        example: bad request
        type: string
    type: object
  web.WebForbiddenError:
    properties:
      code:
        example: 403
        type: integer
      errors:
        example: forbidden
        type: string
    type: object
  web.WebNotFoundError:
    properties:
      code:
        example: 404
        type: integer
      errors:
        example: not found
        type: string
    type: object
  web.WebSuccess-array_response_CarResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        items:
          $ref: '#/definitions/response.CarResponse'
        type: array
      message:
        example: success
        type: string
    type: object
  web.WebSuccess-response_CarResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/response.CarResponse'
      message:
        example: success
        type: string
    type: object
  web.WebSuccess-response_LoginResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/response.LoginResponse'
      message:
        example: success
        type: string
    type: object
  web.WebSuccess-response_RegisterResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/response.RegisterResponse'
      message:
        example: success
        type: string
    type: object
  web.WebSuccess-response_UpdateUserProfileResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/response.UpdateUserProfileResponse'
      message:
        example: success
        type: string
    type: object
  web.WebSuccess-response_UserProfileResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        $ref: '#/definitions/response.UserProfileResponse'
      message:
        example: success
        type: string
    type: object
  web.WebSuccess-string:
    properties:
      code:
        example: 200
        type: integer
      data:
        type: string
      message:
        example: success
        type: string
    type: object
  web.WebUnauthorizedError:
    properties:
      code:
        example: 401
        type: integer
      errors:
        example: unauthorized
        type: string
    type: object
info:
  contact: {}
paths:
  /api/auth/login:
    post:
      description: Logging in to get jwt token to access admin or user api by roles.
      parameters:
      - description: the body to login a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.WebUnauthorizedError'
      summary: User Login.
      tags:
      - Auth
  /api/auth/register:
    post:
      description: Registering a user from public access.
      parameters:
      - description: the body to register a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/web.WebSuccess-response_RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
      summary: User Register.
      tags:
      - Auth
  /api/cars:
    get:
      description: Find all car.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/web.WebSuccess-array_response_CarResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.WebForbiddenError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
      summary: Find all car.
      tags:
      - Cars
    post:
      description: Create a car.
      parameters:
      - description: the body to register a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.CarCreateRequest'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/web.WebSuccess-response_CarResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.WebForbiddenError'
      security:
      - BearerToken: []
      summary: Create car.
      tags:
      - Cars
  /api/cars/{id}:
    delete:
      description: Delete a car.
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: integer
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/web.WebSuccess-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.WebForbiddenError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
      security:
      - BearerToken: []
      summary: Delete car.
      tags:
      - Cars
    get:
      description: Find a car by id.
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/web.WebSuccess-response_CarResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.WebForbiddenError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
      summary: Find car.
      tags:
      - Cars
    patch:
      description: Update a car.
      parameters:
      - description: Car ID
        in: path
        name: id
        required: true
        type: integer
      - description: the body to register a user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.CarUpdateRequest'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/web.WebSuccess-response_CarResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.WebForbiddenError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
      security:
      - BearerToken: []
      summary: Update car.
      tags:
      - Cars
  /api/users:
    delete:
      description: Delete a user profile by ID.
      parameters:
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
      security:
      - BearerToken: []
      summary: Delete User.
      tags:
      - Users
  /api/users/password:
    patch:
      description: Update the current user's password.
      parameters:
      - description: the body to update a password
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.UpdatePasswordRequest'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
      security:
      - BearerToken: []
      summary: Update user password.
      tags:
      - Users
  /api/users/profile:
    patch:
      description: Update the profile of a user.
      parameters:
      - description: the body to update user profile
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.UpdateUserProfileRequest'
      - description: 'Authorization. How to input in swagger : ''Bearer <insert_your_token_here>'''
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_UpdateUserProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
      security:
      - BearerToken: []
      summary: Update User Profile.
      tags:
      - Users
  /api/users/profile/{id}:
    get:
      description: Get user profile data.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/web.WebSuccess-response_UserProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/web.WebBadRequestError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/web.WebNotFoundError'
      summary: Get user profile.
      tags:
      - Users
swagger: "2.0"
