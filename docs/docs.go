// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth/login": {
            "post": {
                "description": "Logging in to get jwt token to access admin or user api by roles.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User login.",
                "parameters": [
                    {
                        "description": "the body to login a user",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.WebSuccess-response_LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.WebBadRequestError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.WebUnauthorizedError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.WebInternalServerError"
                        }
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "description": "Registering a user from public access.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User register.",
                "parameters": [
                    {
                        "description": "the body to register a user",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/web.WebSuccess-response_RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.WebBadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.WebInternalServerError"
                        }
                    }
                }
            }
        },
        "/api/cars": {
            "get": {
                "description": "Find all car.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cars"
                ],
                "summary": "Find all car.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.WebSuccess-array_response_CarResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.WebInternalServerError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Create a car.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cars"
                ],
                "summary": "Create car.",
                "parameters": [
                    {
                        "description": "the body to create a car",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CarCreateRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization. How to input in swagger : 'Bearer \u003cinsert_your_token_here\u003e'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/web.WebSuccess-response_CarResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.WebBadRequestError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/web.WebForbiddenError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.WebInternalServerError"
                        }
                    }
                }
            }
        },
        "/api/cars/{id}": {
            "get": {
                "description": "Find a car by id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cars"
                ],
                "summary": "Find car.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Car ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.WebSuccess-response_CarResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/web.WebNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.WebInternalServerError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Delete a car.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cars"
                ],
                "summary": "Delete car.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Car ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization. How to input in swagger : 'Bearer \u003cinsert_your_token_here\u003e'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.WebSuccess-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.WebBadRequestError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/web.WebForbiddenError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/web.WebNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.WebInternalServerError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Update a car.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cars"
                ],
                "summary": "Update car.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Car ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "the body to update a car",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CarUpdateRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization. How to input in swagger : 'Bearer \u003cinsert_your_token_here\u003e'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.WebSuccess-response_CarResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.WebBadRequestError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/web.WebForbiddenError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/web.WebNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.WebInternalServerError"
                        }
                    }
                }
            }
        },
        "/api/reviews": {
            "get": {
                "description": "Find all review.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reviews"
                ],
                "summary": "Find all review.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.WebSuccess-array_response_FindReviewResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.WebInternalServerError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Create a review.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reviews"
                ],
                "summary": "Create review.",
                "parameters": [
                    {
                        "description": "the body to create a review",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.ReviewCreateRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization. How to input in swagger : 'Bearer \u003cinsert_your_token_here\u003e'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/web.WebSuccess-response_ReviewResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.WebBadRequestError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/web.WebNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.WebInternalServerError"
                        }
                    }
                }
            }
        },
        "/api/reviews/{id}": {
            "get": {
                "description": "Find a review by id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reviews"
                ],
                "summary": "Find review.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "review ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.WebSuccess-response_FindReviewResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/web.WebNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.WebInternalServerError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Delete a review.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reviews"
                ],
                "summary": "Delete review.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization. How to input in swagger : 'Bearer \u003cinsert_your_token_here\u003e'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.WebSuccess-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.WebBadRequestError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/web.WebNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.WebInternalServerError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Update a review.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reviews"
                ],
                "summary": "Update review.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "the body to update a review",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.ReviewUpdateRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization. How to input in swagger : 'Bearer \u003cinsert_your_token_here\u003e'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.WebSuccess-response_ReviewResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.WebBadRequestError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/web.WebNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.WebInternalServerError"
                        }
                    }
                }
            }
        },
        "/api/users": {
            "delete": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Delete a user profile by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization. How to input in swagger : 'Bearer \u003cinsert_your_token_here\u003e'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.WebSuccess-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.WebBadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.WebInternalServerError"
                        }
                    }
                }
            }
        },
        "/api/users/password": {
            "patch": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Update the current user's password.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user password.",
                "parameters": [
                    {
                        "description": "the body to update a password",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdatePasswordRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization. How to input in swagger : 'Bearer \u003cinsert_your_token_here\u003e'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.WebSuccess-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.WebBadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.WebInternalServerError"
                        }
                    }
                }
            }
        },
        "/api/users/profile": {
            "patch": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Update the profile of a user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user profile.",
                "parameters": [
                    {
                        "description": "the body to update user profile",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdateUserProfileRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization. How to input in swagger : 'Bearer \u003cinsert_your_token_here\u003e'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.WebSuccess-response_UpdateUserProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.WebBadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.WebInternalServerError"
                        }
                    }
                }
            }
        },
        "/api/users/profile/{id}": {
            "get": {
                "description": "Get user profile data.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user profile.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.WebSuccess-response_UserProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.WebBadRequestError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/web.WebNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.WebInternalServerError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "request.CarCreateRequest": {
            "type": "object",
            "required": [
                "brand",
                "image",
                "model",
                "year"
            ],
            "properties": {
                "brand": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "year": {
                    "type": "integer",
                    "minimum": 1878
                }
            }
        },
        "request.CarUpdateRequest": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "year": {
                    "type": "integer",
                    "minimum": 1878
                }
            }
        },
        "request.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "request.RegisterRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 6
                },
                "username": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3
                }
            }
        },
        "request.ReviewCreateRequest": {
            "type": "object",
            "required": [
                "car_id",
                "content",
                "title"
            ],
            "properties": {
                "car_id": {
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "request.ReviewUpdateRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "request.UpdatePasswordRequest": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 3
                }
            }
        },
        "request.UpdateUserProfileRequest": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer",
                    "minimum": 0
                },
                "bio": {
                    "type": "string",
                    "maxLength": 500
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "gender": {
                    "type": "string",
                    "enum": [
                        "MALE",
                        "FEMALE"
                    ]
                },
                "username": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3
                }
            }
        },
        "response.CarResponse": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string",
                    "example": "Toyota"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "image": {
                    "type": "string",
                    "example": "url"
                },
                "model": {
                    "type": "string",
                    "example": "Yaris"
                },
                "year": {
                    "type": "integer",
                    "example": 2020
                }
            }
        },
        "response.FindReviewResponse": {
            "type": "object",
            "properties": {
                "car": {
                    "$ref": "#/definitions/response.CarResponse"
                },
                "content": {
                    "type": "string",
                    "example": "Lorem ipsum dolor sit amet"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "title": {
                    "type": "string",
                    "example": "Title"
                },
                "user": {
                    "$ref": "#/definitions/response.ReviewUserResponse"
                }
            }
        },
        "response.LoginResponse": {
            "type": "object",
            "properties": {
                "role": {
                    "type": "string",
                    "example": "USER"
                },
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "example": "luigi"
                }
            }
        },
        "response.RegisterResponse": {
            "type": "object",
            "properties": {
                "role": {
                    "type": "string",
                    "example": "USER"
                },
                "username": {
                    "type": "string",
                    "example": "luigi"
                }
            }
        },
        "response.ReviewResponse": {
            "type": "object",
            "properties": {
                "car_id": {
                    "type": "integer",
                    "example": 2
                },
                "content": {
                    "type": "string",
                    "example": "Lorem ipsum dolor sit amet"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "title": {
                    "type": "string",
                    "example": "Title"
                },
                "user_id": {
                    "type": "integer",
                    "example": 3
                }
            }
        },
        "response.ReviewUserResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "username": {
                    "type": "string",
                    "example": "John Doe"
                }
            }
        },
        "response.UpdateUserProfileResponse": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer",
                    "example": 18
                },
                "bio": {
                    "type": "string",
                    "example": "I am Luigi"
                },
                "email": {
                    "type": "string",
                    "example": "luigi@sam.com"
                },
                "full_name": {
                    "type": "string",
                    "example": "Luigi Di Caprio"
                },
                "gender": {
                    "type": "string",
                    "example": "MALE"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "role": {
                    "type": "string",
                    "example": "USER"
                },
                "username": {
                    "type": "string",
                    "example": "luigi"
                }
            }
        },
        "response.UserProfileResponse": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer",
                    "example": 18
                },
                "bio": {
                    "type": "string",
                    "example": "I am Luigi"
                },
                "email": {
                    "type": "string",
                    "example": "luigi@sam.com"
                },
                "full_name": {
                    "type": "string",
                    "example": "Luigi Di Caprio"
                },
                "gender": {
                    "type": "string",
                    "example": "MALE"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "role": {
                    "type": "string",
                    "example": "USER"
                },
                "username": {
                    "type": "string",
                    "example": "luigi"
                }
            }
        },
        "web.WebBadRequestError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "errors": {
                    "type": "string",
                    "example": "Bad Request"
                }
            }
        },
        "web.WebForbiddenError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 403
                },
                "errors": {
                    "type": "string",
                    "example": "Forbidden"
                }
            }
        },
        "web.WebInternalServerError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "errors": {
                    "type": "string",
                    "example": "Internal Server Error"
                }
            }
        },
        "web.WebNotFoundError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 404
                },
                "errors": {
                    "type": "string",
                    "example": "Not Found"
                }
            }
        },
        "web.WebSuccess-array_response_CarResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.CarResponse"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "web.WebSuccess-array_response_FindReviewResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.FindReviewResponse"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "web.WebSuccess-response_CarResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "$ref": "#/definitions/response.CarResponse"
                },
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "web.WebSuccess-response_FindReviewResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "$ref": "#/definitions/response.FindReviewResponse"
                },
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "web.WebSuccess-response_LoginResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "$ref": "#/definitions/response.LoginResponse"
                },
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "web.WebSuccess-response_RegisterResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "$ref": "#/definitions/response.RegisterResponse"
                },
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "web.WebSuccess-response_ReviewResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "$ref": "#/definitions/response.ReviewResponse"
                },
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "web.WebSuccess-response_UpdateUserProfileResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "$ref": "#/definitions/response.UpdateUserProfileResponse"
                },
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "web.WebSuccess-response_UserProfileResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "$ref": "#/definitions/response.UserProfileResponse"
                },
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "web.WebSuccess-string": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "web.WebUnauthorizedError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 401
                },
                "errors": {
                    "type": "string",
                    "example": "Unauthorized"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
